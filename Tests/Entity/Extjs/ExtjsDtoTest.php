<?php

namespace Walls\DtoBundle\Entity\Extjs;

use Walls\DtoBundle\Entity\Extjs\ExtjsDto;
use Walls\DtoBundle\Tests\Fixtures\Person;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-11-15 at 04:28:22.
 */
class ExtjsDtoTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @covers Walls\DtoBundle\Entity\Extjs\ExtjsDto::getTotal
     */
    public function testGetTotalOnePrimitiveDatum()
    {
        $data = 'Hello';

        $dto = new ExtjsDto(null, null, $data);

        $expected = 1;
        $actual   = $dto->getTotal();

        $this->assertSame($expected, $actual);
    }

    /**
     * @covers Walls\DtoBundle\Entity\Extjs\ExtjsDto::getTotal
     */
    public function testGetTotalArrayPrimitiveData()
    {
        $data = ['Hello', 'Foo', 'Bar'];

        $dto = new ExtjsDto(null, null, $data);

        $expected = 3;
        $actual   = $dto->getTotal();

        $this->assertSame($expected, $actual);
    }

    /**
     * @covers Walls\DtoBundle\Entity\Extjs\ExtjsDto::getTotal
     */
    public function testGetTotalOneObjectDatum()
    {
        $data = new Person('Me');

        $dto = new ExtjsDto(null, null, $data);

        $expected = 1;
        $actual   = $dto->getTotal();

        $this->assertSame($expected, $actual);
    }

    /**
     * @covers Walls\DtoBundle\Entity\Extjs\ExtjsDto::getTotal
     */
    public function testGetTotalArrayObjectData()
    {
        $data = [
            new Person('Me'),
            new Person('You'),
            new Person('Who')
        ];

        $dto = new ExtjsDto(null, null, $data);

        $expected = 3;
        $actual   = $dto->getTotal();

        $this->assertSame($expected, $actual);
    }
}
